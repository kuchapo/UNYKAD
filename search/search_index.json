{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unykad Documentation Page","text":""},{"location":"#some-important-commands","title":"Some important Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"neue_seite/","title":"Meine neue Seite","text":"<p>Hier ist der Inhalt meiner neuen Seite. schon lw</p>"},{"location":"How%20to%20git/einf%C3%BCrung_in_git/","title":"Einf\u00fchrung in Git","text":"<p>Git ist ein verteiltes Versionskontrollsystem, das von Entwicklern verwendet wird, um den Verlauf von \u00c4nderungen an Dateien zu verfolgen und gemeinsam an Projekten zu arbeiten. Es erm\u00f6glicht die Verwaltung von Quellcode und erleichtert die Zusammenarbeit in Teams, indem es verschiedene Versionen eines Projekts verwaltet und es Benutzern erm\u00f6glicht, \u00c4nderungen r\u00fcckg\u00e4ngig zu machen, Branches zu erstellen und zusammenzuf\u00fchren.</p>"},{"location":"How%20to%20git/einf%C3%BCrung_in_git/#wichtige-begriffe","title":"Wichtige Begriffe","text":"<ul> <li>Repository (Repo): Ein Ordner, der alle Dateien und den Verlauf eines Projekts enth\u00e4lt.</li> <li>Commit: Ein gespeicherter Schnappschuss des aktuellen Zustands der Projektdateien.</li> <li>Branch: Eine separate Entwicklungslinie innerhalb eines Repositories.</li> <li>Merge: Das Zusammenf\u00fchren von \u00c4nderungen eines Branches in einen anderen.</li> <li>Staging Area (Index): Ein Zwischenspeicher f\u00fcr \u00c4nderungen, die zum Commit bereit sind.</li> <li>Remote Repository: Ein Repository, das auf einem Server gehostet wird, z.B. auf GitHub.</li> <li>Pull: Das Abrufen und Zusammenf\u00fchren von \u00c4nderungen aus einem Remote-Repository.</li> <li>Push: Das Hochladen von lokalen Commits in ein Remote-Repository.</li> <li>Clone: Das Kopieren eines Remote-Repositories auf den lokalen Computer.</li> <li>Checkout: Das Wechseln zu einem anderen Branch oder Commit.</li> </ul>"},{"location":"How%20to%20git/einf%C3%BCrung_in_git/#wichtige-git-befehle","title":"Wichtige Git-Befehle","text":"<ul> <li><code>git init</code>: Erstellt ein neues Git-Repository in einem Verzeichnis.</li> <li><code>git clone [URL]</code>: Klont ein bestehendes Repository von einer URL in ein neues Verzeichnis.</li> <li><code>git status</code>: Zeigt den aktuellen Status des Arbeitsverzeichnisses und der Staging-Area an.</li> <li><code>git add [Datei/Verzeichnis]</code>: F\u00fcgt eine Datei oder ein Verzeichnis zur Staging-Area hinzu.</li> <li><code>git commit -m \"[Nachricht]\"</code>: Erstellt einen Commit mit den Dateien in der Staging-Area und f\u00fcgt eine Commit-Nachricht hinzu.</li> <li><code>git commit --amend</code>: \u00c4ndert den letzten Commit (z.B. um die Commit-Nachricht zu bearbeiten).</li> <li><code>git log</code>: Zeigt die Commit-Historie des aktuellen Branches an.</li> <li><code>git log --oneline</code>: Zeigt die Commit-Historie im kompakten Format (eine Zeile pro Commit).</li> <li><code>git diff</code>: Zeigt die \u00c4nderungen zwischen dem Arbeitsverzeichnis und der Staging-Area an.</li> <li><code>git diff --staged</code>: Zeigt die \u00c4nderungen an, die zur Staging-Area hinzugef\u00fcgt wurden, aber noch nicht committet sind.</li> <li><code>git branch</code>: Zeigt alle lokalen Branches an.</li> <li><code>git branch [Name]</code>: Erstellt einen neuen Branch mit dem angegebenen Namen.</li> <li><code>git checkout [Branch]</code>: Wechselt zu einem anderen Branch.</li> <li><code>git checkout -b [Name]</code>: Erstellt und wechselt zu einem neuen Branch mit dem angegebenen Namen.</li> <li><code>git merge [Branch]</code>: Mergt den angegebenen Branch in den aktuellen Branch.</li> <li><code>git rebase [Branch]</code>: Wendet die Commits des aktuellen Branches auf den angegebenen Branch neu an.</li> <li><code>git stash</code>: Speichert uncommittete \u00c4nderungen vor\u00fcbergehend, um mit einem sauberen Arbeitsverzeichnis zu arbeiten.</li> <li><code>git stash pop</code>: Stellt die zuletzt gespeicherten \u00c4nderungen aus dem Stash wieder her und entfernt sie aus dem Stash.</li> <li><code>git stash apply</code>: Stellt die zuletzt gespeicherten \u00c4nderungen aus dem Stash wieder her, ohne sie aus dem Stash zu entfernen.</li> <li><code>git remote -v</code>: Zeigt die URLs aller Remote-Repositories an.</li> <li><code>git remote add [Name] [URL]</code>: F\u00fcgt ein Remote-Repository mit dem angegebenen Namen hinzu.</li> <li><code>git pull [Remote] [Branch]</code>: Holt die \u00c4nderungen von einem Remote-Repository und f\u00fchrt sie mit dem aktuellen Branch zusammen.</li> <li><code>git fetch [Remote]</code>: Holt die \u00c4nderungen von einem Remote-Repository, ohne sie zu mergen.</li> <li><code>git push [Remote] [Branch]</code>: Schiebt die lokalen Commits zum Remote-Repository.</li> <li><code>git push -u [Remote] [Branch]</code>: Schiebt die lokalen Commits zum Remote-Repository und setzt den Remote-Branch als Tracking-Branch.</li> <li><code>git reset --hard [Commit]</code>: Setzt das Arbeitsverzeichnis, die Staging-Area und den aktuellen Branch auf den angegebenen Commit zur\u00fcck.</li> <li><code>git reset --soft [Commit]</code>: Setzt den aktuellen Branch auf den angegebenen Commit zur\u00fcck, beh\u00e4lt jedoch die \u00c4nderungen in der Staging-Area bei.</li> <li><code>git clean -f</code>: Entfernt nicht versionierte Dateien aus dem Arbeitsverzeichnis.</li> <li><code>git tag [Name]</code>: Erstellt ein neues Tag f\u00fcr den aktuellen Commit.</li> <li><code>git tag -d [Name]</code>: L\u00f6scht ein lokales Tag.</li> <li><code>git push [Remote] --tags</code>: Schiebt alle lokalen Tags zum Remote-Repository.</li> </ul>"},{"location":"How%20to%20git/MkDocs/erste_schritte/","title":"Erste Schritte","text":"<p>Wenn man eine neue MkDocs Seite erstellt, dann sollte man folgende Befehle im jeweiligen Ordner der Doku durchf\u00fchren:</p>"},{"location":"How%20to%20git/MkDocs/erste_schritte/#erstellen-einer-virtuellen-umgebung","title":"Erstellen einer virtuellen Umgebung","text":"<pre><code>python -m venv venv\n</code></pre>"},{"location":"How%20to%20git/MkDocs/erste_schritte/#aktivieren-der-virtuellen-umgebung","title":"Aktivieren der virtuellen Umgebung","text":""},{"location":"How%20to%20git/MkDocs/erste_schritte/#windows","title":"Windows","text":"<pre><code>.\\venv\\Scripts\\activate\n</code></pre>"},{"location":"How%20to%20git/MkDocs/erste_schritte/#macos-und-linux","title":"MacOS und Linux","text":"<pre><code>source venv/bin/activate\n</code></pre>"},{"location":"Networking/private_ip-adressen/","title":"Private IP-Adressen","text":"<p>Private IP-Adressen sind IP-Adressen, die innerhalb eines lokalen Netzwerks verwendet werden und nicht direkt \u00fcber das Internet erreichbar sind. Sie werden typischerweise in Heimnetzwerken oder Unternehmensnetzwerken zur internen Kommunikation zwischen Ger\u00e4ten verwendet.</p> <p>10.0.0.0 bis 10.255.255.255 (10.0.0.0/8) 172.16.0.0 bis 172.31.255.255 (172.16.0.0/12) 192.168.0.0 bis 192.168.255.255 (192.168.0.0/16)</p>"},{"location":"Networking/vlsm/","title":"VLSM","text":"<p>Beispiel: Es werden mit Hilfe von VLSM jeweils 800, 400 und 117 Clients in voneinander isolierten Netze eingeteilt. Wichtig zu beachten ist, dass die Netz-ID und Broadcast-IP bei der Hostanzahl ber\u00fccksichtigt werden sollten und dass man immer mit dem gr\u00f6\u00dften Subnetz anf\u00e4ngt und dann immer jeweils das kleinere nimmt.</p> <p>Tabelle als Hilfestellung benutzen:</p> Hostanzahl 1024 512 256 128 64 32 16 8 4 2 Subnetze 2 4 8 16 32 64 128 256 512 1024 bin\u00e4r 512 256 128 64 32 16 8 4 2 1 <p>Info</p> <p>Wenn man nach Hostanzahl geht, dann wird der Strich links von der Zahl gesetzt. 'Subnetze' und 'bin\u00e4r' werden hier nur zum besseren Verst\u00e4ndnis aufgelistet.</p> <p>Das Netz 10.4.0.0 wird folgenderma\u00dfen segmentiert:</p> <p>f\u00fcr 800 Hosts: 10.4.000000|00.00000000 Netz-ID 10.4.0.0/22 10.4.000000|11.11111111 Broadcast-IP 10.4.3.255/22</p> <p>f\u00fcr 400 Hosts: 10.4.0000010|0.00000000 Netz-ID 10.4.4.0/23 10.4.0000010|1.11111111 Broadcast-IP 10.4.6.127/25</p> <p>f\u00fcr 117 Hosts: 10.4.00000110.0|0000000 Netz-ID 10.4.6.0/25 10.4.00000110.0|1111111 Broadcast-IP 10.4.6.127/25</p>"}]}